상속
    1. strategy

        합성을 이용한다.
            FlyBehavior flyBehavior;
            QuackBehavior quackBehavior;

            void fly() {
                flyBehavior.fly(); // 위임
            }
            void quack() {
                quackBehavior.quack(); // 동적 메서드 탐색
            }
            // 메시지는 고정되어 있다.

    10. state
        합성을 이용한다. : strategy와 용도가 다르다.

        재귀성
            슬롯을 가지고 있는 클래스는 상태 슬롯에 메시지와 this를 전달하고
            상태 트리의 구상 클래스는 this.슬롯의 상태를 다른 상태 클래스로 변경한다.


    8. template method

        상속을 이용한다.
        abstract class CaffeineBeverage {

            final void prepareRecipe() {
                boilWater();
                brew();
                pourInCup();
                addCondiments();
            } // template method : 알고리즘의 골격을 상위 레벨에 정의합니다.

        ...

        }

        hook : 상위 레벨에서 구현되어, 기본값이 되거나, 코드가 없음

        할리우드 원칙, 의존성 역전 원칙
            상위 레벨에서 하위 레벨을 호출합니다.
            하위 레벨은 상위 레벨에 의존합니다.



프레임워크
    2. observer, listener

        일대다 동기화
            Subject : 
                정보를 가진다.
                List<Observer> Observers를 가진다.
                Observers에 register
                Observers에 notify
                    each.update(); // 순회한다.
            Observers : 
                Subject의 정보를 받아서 업데이트한다.
                    this.update(); // 실행된다.

        Java Swing
            Component, invoker : 
                List<Listener> Listeners를 가진다.
                Listener에 register
                    button.addActionListener(new ActionListener());
                Listeners에 notify : 버튼, invoker을 누르면
                    each.event(); // 순회한다.
            Listeners, command interface : 
                Component의 메시지를 받아서 처리한다.
                    this.actionPerformed(); // 실행된다.
            
            


        프레임워크의 예시
            상위 레벨에 리스트와 리스트를 순회하며 전달하는 메시지(시그니처)가 고정되어 있다.
            사용자는 어떤 메시지를 받게 될지 알고 있다. (퍼블릭 인터페이스)
            사용자는 메시지를 받았을 때, 취해야 할 행동을 구현해야 할 책임이 있다.

            1. 사용자가 ActionListener 타입을 리스트에 등록하고 
            외부에 이벤트가 발생하면 상위 레벨의 update 메서드가 호출된다.
            2. 이는 리스트를 순회하면서 actionPerformed 메시지를 전달하게 되고,
            각각의 ActionListener는 자신의 actionPerformed를 호출하게 된다.

            람다 표현식
                사용자가 ActionListener 타입을 리스트에 등록할 때,
                파라미터로 actionPerformed의 구현을 전달할 수 있다. : 시그니처가 없이도 컴파일러는 추론한다.

                button.addActionListener(e -> System.out.println("버튼을 눌렀습니다."));

        API 상속
            1. 상위 레벨이 보이지 않는다는 것
            2. 상위 레벨의 구현을 호출한다는 것,
            3. 상위 레벨의 구현은 보이지 않는다는 것
            4. 상위 레벨의 후크를 실행하지 않도록 하위 레벨에서 구현해두는 것

            Arrays.sort(ducks);
                조건 1. 시그니처에 고정된 포멀 파라미터 때문에
                    ducks의 타입은 인터페이스 Comparable<Duck> 로 추상화될 수 있어야
                    전달할 수 있다. : 시그니처가 고정되어 있다.
                조건 2. 알고리즘에 고정된 메시지 이름 때문에
                    Comparable<Duck> 의 메서드 compareTo를 구현하여
                    sort 메서드가 호출될 때, 사용될 수 있어야 한다.
                    즉, 상위 레벨의 후크에서 처리되지 않고 
                    사용자의 구상 클래스에서 처리되어야 한다.
        
        푸시 : 정보를 파라미터로 전달하는 방식 : update(int a, int b, int c)
        풀 : this를 파라미터로 전달하고 this.getInfo()로 정보를 끌어오는 방식 : update(this)
            또는 this를 이미 알고있는 경우 파라미터 없이 메시지만 전달해도 된다. : update()



    6. command

        invoker : 
            List<Command> commands;
            setCommand()
            foreach() {
                command.execute();
            }

        command :
            execute() {
                receiver.action();
            }
        receiver :
            action()

        Loader : 
            객체를 생성하고, remoteControl에 등록하는 역할을 수행한다.
            정적 메서드 main, 팩토리 메서드 create

    6-1. 익명 클래스

        Anonymous obj, Anonymous Class, Anonymous Inner Class

            Runnable r = new Runnable() {
                @Override
                public void run() {
                    System.out.println("Hello");
                }
            };
            button.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        System.out.println("Button clicked");
                    }
            }); // ActionListener는 존재해야 생성할 수 있습니다.

        Lambda expression, anonymous func : 익명 클래스의 인스턴스를 생성하는 표현식

            Cook cook;
            Order o;
            public void createOrder() {
                        // cook을 이용할 수 있다.
            Order o = () -> { cook.makeBurger(); cook.makeFries(); };
            } // 함수형 인터페이스가 요구됩니다.
            
            메서드 참조와 생성자 참조 : 
                람다 표현식을 간결하게 만드는 데 사용됩니다.
                (x, y) -> x.compareToIgnoreCase(y)
                String::compareToIgnoreCase // 메서드 참조

            함수형 인터페이스 : 하나의 추상 메서드만을 가집니다.

            // e.g.
            remoteControl.setCommand(0, livingRoomLight::on, livingRoomLight::off);
            remoteControl.setCommand(0, () -> { livingRoomLight.on(); }, () -> { livingRoomLight.off(); });
            remoteControl.setCommand(0, new Command() {
                @Override
                public void execute() {
                    livingRoomLight.on();
                }
            }, new Command() {
                @Override
                public void execute() {
                    livingRoomLight.off();
                }
            });


재귀성
    3. decorator

        두 가지 경우
            1. 클래스 폭발, 중복 코드 폭증, 캡슐화 증가
            2. 중복 코드 감소, 공유 코드 증가, 캡슐화 감소

        캡슐화의 위험성
            1. 그러나 예외는 정상으로 간주될 것이다. : 변경 해야 할 클래스 한 두개를 빼먹고 컴파일하는 경우
            2. 각 캡슐마다 코드 변경을 수행해야 한다. : 공유 코드는 한 번의 변경으로 모든 캡슐에 반영된다.

        타입의 구성
            1. 노드 : 구조는 재귀적이라고 할 수 있다.
            2. 루트 : 노드의 변형으로 재귀성을 잃어버렸다고 할 수 있다.

        Beverage beverage = new cola ( new espresso ( new latte ( new tea ( new ending() ) ) ) ) ;
        // 'ending' -> `tea` -> `latte` -> `espresso` -> `cola` -> 순서로 생성 // 생성되고 나서, 파라미터를 통해서 전달되어야 하기 떄문에.
        // 'cola' 가 스택의 맨 위에 있습니다. : 'beverage' 가 런타임에 'cola' 로 보입니다.
        // 'cola' 가 상속트리의 맨 아래에 있습니다.
        // 'ending' 으로 반드시 끝나야 합니다. 나머지는 재귀적으로 next에 메시지를 전달합니다.

타입 일치
    7.1 adapter

        퍼블릭 인터페이스가 다른 경우 어뎁터 클래스는 요구되는 타입과 인터페이스를 맞춰준다.
        모든 기능은 위임되며, 메시지를 전달하는 역할만 수행한다.
        A와 B 어느 쪽의 퍼블릭 인터페이스에 맞춰야 할까?

    7.2 Facade

        사용하고자 하는 서브시스템 클래스의 모든 레퍼런스를 생성자로 전달받습니다.
        Facade를 통해서 메시지를 보내면 서브시스템에 메시지를 전달합니다. 위임

    
기능
    4. Factory

        객체 생성 전담 클래스
        객체의 생성과 사용 분리 원칙

    5. singleton

        오직 하나 뿐인 인스턴스 생성

    9.1 iterator 
        List의 iterator 객체를 받아서 할당하고 
        hasNext()와 next()를 사용할 수 있습니다. : 리스트를 순회할 수 있습니다.
        Arrays.asList() : 배열을 리스트로 변환합니다.
        리스트 객체를 전부 넘겨주지 않고, iterator 객체만 넘겨줄 수 있다.
        일관적이고 통일된 방식으로 순회할 수 있다.

        iterable : iterator를 반환하는 메서드를 가지고 있습니다.
        모든 컬렉션 클래스는 Iterable을 상속하는 Collection 인터페이스를 구현합니다.
        모든 컬렉션 클래스는 Iteralbe입니다.
        forEach() 메서드를 사용할 수 있습니다.
        spliterator() 메서드를 사용할 수 있습니다.
        ArrayList도 Iterable을 입니다.

        어떤 클래스에서 Iterable을 구현한다면, 그 클래스는
        iterator() 메서드를 구현합니다.

        자바에서 `Iterator`와 `Iterable`은 컬렉션에 대한 순회를 관리하는 인터페이스로 사용되며, 서로 연관되어 있지만 각각 다른 역할을 수행합니다.

            ### 1. Iterator 인터페이스

            `Iterator` 인터페이스는 컬렉션의 요소를 순차적으로 탐색하기 위한 메서드들을 정의합니다. `Iterator`는 다음과 같은 주요 메서드를 가집니다.

            - `boolean hasNext()`: 다음 요소가 있는지 확인합니다.
            - `E next()`: 다음 요소를 반환합니다.

            `Iterator` 인터페이스를 구현하는 클래스는 컬렉션의 특정 요소에 대한 참조를 관리하고, 요청에 따라 다음 요소를 제공합니다.

            ### 2. Iterable 인터페이스

            `Iterable` 인터페이스는 객체가 "iterable"하다는 것을 나타내며, 해당 객체에 대해 반복을 수행할 수 있는 `Iterator` 객체를 얻을 수 있는 방법을 제공합니다. `Iterable` 인터페이스는 다음과 같은 메서드를 포함합니다.

            - `Iterator<E> iterator()`: 현재 컬렉션의 요소를 순회하는 `Iterator` 인스턴스를 반환합니다.

            `Iterable`을 구현하는 클래스는 자신의 요소를 순회할 수 있는 `Iterator` 객체를 제공해야 하며, 이를 통해 for-each 루프와 같은 반복 구조에서 사용될 수 있습니다.

            ### 요약

            - `Iterator`: 컬렉션의 요소를 순차적으로 접근하는 방법을 제공하는 인터페이스입니다.
            - `Iterable`: 객체가 반복 가능하다는 것을 나타내며, 해당 객체에 대한 `Iterator`를 제공하는 인터페이스입니다.

            간단한 예로, `ArrayList`와 같은 클래스가 `Iterable`을 구현하면, `Iterator` 인스턴스를 얻어 해당 리스트의 요소를 순회할 수 있습니다. 이를 통해 자바의 for-each 루프에서 해당 컬렉션을 사용할 수 있게 됩니다.

    9.2 composite
        객체를 트리구조(composite structure)로 구성합니다.

        
    10. Model, View, Controler

            클라이언트 -> 뷰(UI, 디스플레이) -> 

            컨트롤러 -> 
            모델 -> 

            뷰(UI, 디스플레이) -> 클라이언트



        모델 : 데이터와 로직 : 자신의 상태변화를 옵저버들에게 연락
            옵저버 리스트를 가지고 있다. (구상 클래스, 계산)
        뷰 : 사용자 인터페이스
            모델에게 옵저버를 등록하도록 요청할 수 있다.
        컨트롤러 : 뷰와 모델 사이, 뷰를 대상으로 하는 행동만 구현합니다.
            뷰를 대상으로 취한 행동을 모델로의 요청으로 바꿔주는 역할입니다.
            (model.on(), model.off(), model.setSpeed(3)) // 위임


    11. Mediator

            클라이언트는 중재자를 통해서만 통신합니다.
            중재자는 요청을 받아 위임합니다.

    12. Memento

            객체를 이전의 상태로 복구해야 한다면
            메멘토 객체를 써서 상태를 저장합니다.