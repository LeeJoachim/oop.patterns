기본 프로그래밍 구조
    1. 정적, 비정적
       정적 메서드는 객체로 호출하지 않는다. 
       프로그램의 실행은 정적 메서드인 main에서 시작한다.

객체 지향 프로그래밍
    1. 변수는 객체 참조를 저장한다.
    2. 정적 변수는 어떤 객체에도 속하지 않는다.
    3. 정적 메서드는 객체로 호출하지 않는다.
    4. import 선언은 패키지 이름을 생략한다는 의미이다.
    5. 내부 클래스는 비정적 중첩 클래스다.
    6. 내부 클래스의 인스턴스는 자신을 생성한 바깥쪽 클래스의 객체를 참조한다.

인터페이스와 람다 표현식
    1. 변수는 자동으로 public static final이다. : 
        상수로 사용되며, 선언과 동시에 초기화 되어야 합니다.
    2. 메서드는 자동으로 public abstract이다.
    3. 메서드는 static으로 선언되는 순간 public static 이다.
    4. 메서드는 default로 선언되는 순간 public이다.
    5. 함수형 인터페이스는 하나의 추상 메서드만을 가진다.
    6. 메서드 참조와 생성자 참조는 메서드와 생성자를 호출하지 않고 참조한다.

    람다 표현식, Anonymous func
        () -> first.length() - second.length()
        함수형 인터페이스를 필요로 한다.
        
    메서드 참조와 생성자 참조
        (x, y) -> x.compareToIgnoreCase(y)
        String::compareToIgnoreCase // 메서드 참조
        

